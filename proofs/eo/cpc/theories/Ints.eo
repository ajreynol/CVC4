(include "../theories/Arith.eo")

; Integer specific operators of arithmetic.

; Integer division and modulus.
(declare-const div (-> Int Int Int) :left-assoc)
(declare-const mod (-> Int Int Int))

; Divisible predicate.
(declare-parameterized-const divisible ((x1 Int) (x2 Int))
  Bool
  :semantics (= (mod x2 x1) 0))

; The "integer power of 2" operator.
; disclaimer: This function is not in SMT-LIB.
(declare-const int.pow2 (-> Int Int))
; The "integer log 2" operator
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const int.log2 ((x1 Int))
  Int
  :semantics (div x1 (int.pow2 x1)))
; The "is integer log 2" operator
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const int.ispow2 ((x1 Int))
  Bool
  :semantics (= x1 (int.pow2 (int.log2 x1))))

; Internally generated terms.
; disclaimer: This function is not in SMT-LIB.
(declare-const div_total (-> Int Int Int) :left-assoc)
; disclaimer: This function is not in SMT-LIB.
(declare-const mod_total (-> Int Int Int))

; Skolem terms for integer division by zero and integer modulus by zero.
(declare-parameterized-const @int_div_by_zero ((x Int))
  Int
  :semantics (div x 0))
(declare-parameterized-const @mod_by_zero ((x Int))
  Int
  :semantics (mod x 0))
