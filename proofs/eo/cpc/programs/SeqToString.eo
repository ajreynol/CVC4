; =============================================================================
;
; This file defines a compilation of sequence values to strings, where a sequence
; value is a concatenation of sequence characters (seq.unit c). This compilation
; is done is such a way that we prove that each sequence character
;   (seq.unit c1) ... (seq.unit cn)
; are such that c1 ... cn denote provably distinct terms (see DistinctValues.eo).
; If this is not the case, then the side conditions below will not evaluate.
;
; The mapping from sequence characters to string characters is arbitrary, in
; particular, the first sequence character is assigned the code point 0, the
; second 1, and so on. This mapping can be tracked as a pair of parallel lists
; e.g. if it is necessary to convert from the string back to its corresponding
; sequence.
;
; =============================================================================


(include "Utils.eo")
(include "DistinctValues.eo")

(include "../theories/Datatypes.eo")

; program: $seq_to_string_rec
; args:
; - t (Seq T): a sequence term, expected to be a sequence value.
; - s String: the accumulated string we have converted so far.
; - units @List: an accumulated list of sequence characters we have converted.
; - chars @List: an accumulated list of string literals of size one corresponding to the conversion of units.
; - n Int: the length of units/chars.
; return: >
;   A tuple containing the result of converting t, and the substitution
;   (units and chars) that was used to convert it.
(program $seq_to_string_rec ((T Type) (t T) (ss (Seq T) :list) (s String) (units @List) (chars @List) (n Int))
  ((Seq T) String @List @List Int) (Tuple String @List @List)
  (
    (($seq_to_string_rec (seq.unit t) s units chars n)              (eo::define ((u (seq.unit t)))
                                                                    ($seq_to_string_rec (eo::cons seq.++ u (@seq.empty (eo::typeof u))) s units chars n)))
    (($seq_to_string_rec (seq.++ (seq.unit t) ss) s units chars n)  (eo::define ((u (seq.unit t)))
                                                                    (eo::define ((id (eo::list_find @list units u)))
                                                                    (eo::ite (eo::is_neg id)
                                                                      ; allocate new
                                                                      ; requires proving that the current character is distinct from all others
                                                                      (eo::requires ($are_distinct_terms_list_rec u units (eo::typeof u)) true
                                                                        (eo::define ((nchar (eo::to_str n)))
                                                                        ($seq_to_string_rec
                                                                          ss
                                                                          (eo::concat s nchar)
                                                                          (eo::cons @list u units)
                                                                          (eo::cons @list nchar chars)
                                                                          (eo::add n 1))))
                                                                      ; already allocated
                                                                      ($seq_to_string_rec
                                                                        ss
                                                                        (eo::concat s (eo::to_str id))
                                                                        units
                                                                        chars
                                                                        n)))))
    (($seq_to_string_rec (@seq.empty T) s units chars n)            (tuple s units chars))
  )
)

; program: $seq_to_string
; args:
; - t (Seq T): a sequence term, expected to be a sequence value.
; return: >
;   The result of converting t to a string based on the above method.
(define $seq_to_string ((T Type :implicit) (s (Seq T)))
  (eo::ite (eo::is_str s)
    s   ; may already be a string
    (eo::match ((ss String) (nunits @List) (nchars @List))
      ($seq_to_string_rec s "" @list.nil @list.nil 0)
      (((tuple ss nunits nchars) ss)))))


; program: $seq_to_string_op_rec
; args:
; - t (Seq T): a term, expected to contain arguments that are sequence values.
; - units @List: an accumulated list of sequence characters we have converted.
; - chars @List: an accumulated list of string literals of size one corresponding to the conversion of units.
; return:
(program $seq_to_string_op_rec ((U Type) (T Type) (f (-> T U)) (a T) (units @List) (chars @List) (S Type))
  (T @List @List) S
  (
  (($seq_to_string_op_rec (f a) units chars)  (eo::match ((U Type))
                                                  (eo::typeof a)
                                                  (
                                                    ((Seq U) (eo::match ((s String) (nunits @List) (nchars @List))
                                                               ($seq_to_string_rec a "" units chars (eo::list_len @list units))
                                                               (((tuple s nunits nchars)  (_ ($seq_to_string_op_rec f nunits nchars) s)))))
                                                    (U       (_ ($seq_to_string_op_rec f units chars) a))
                                                  )))
  (($seq_to_string_op_rec a units chars)      a)
  )
)

(define $seq_to_string_pair ((T Type :implicit) (s (Seq T)) (t (Seq T)))
  (eo::ite (eo::is_str s)
    (eo::requires (eo::is_str t) true (@pair s t))
    ($seq_to_string_op_rec (@pair s t) @list.nil @list.nil)))

;(include "Strings.eo")
;(include "Quantifiers.eo")
;(define $string_to_seq ((s String) (units @List) (chars @List))
;  ($substitute_list ($str_flatten_word s) chars units))
