(include "../theories/Datatypes.eo")

; program: $dt_get_constructors
; args:
; - T Type: The datatype to get the constructors for.
; return: The list of constructors of T, as a eo::List.
; note: >
;   (Unit) tuples are treated as a special case of datatypes with a single
;   constructor. Parametric datatypes must reference the type constructor to
;   extract their constructors.
(program $dt_get_constructors ((D Type) (T Type) (c T) (T1 Type) (T2 Type :list) (DC (-> Type Type)))
  (Type) eo::List
  (
    (($dt_get_constructors (Tuple T1 T2)) (eo::cons eo::List::cons tuple eo::List::nil))
    (($dt_get_constructors UnitTuple)     (eo::cons eo::List::cons tuple.unit eo::List::nil))
    (($dt_get_constructors (DC T))        ($dt_get_constructors DC))   ; user-defined parameteric datatypes, traverse
    (($dt_get_constructors D)             (eo::dt_constructors D))     ; ordinary user-defined datatypes
  )
)

; program: $tuple_get_selectors_rec
; args:
; - T Type: The tuple type to get the selectors for.
; - n Int: The number of component types we have processed so far.
; return: The list of selectors of T, as a eo::List.
; note: >
;   Tuples use a special selector tuple.select indexed by an integer, which is
;   why they require a special method here.
(program $tuple_get_selectors_rec ((D Type) (T Type) (t T) (T1 Type) (T2 Type :list) (n Int))
  (Type Int) Bool
  (
    (($tuple_get_selectors_rec UnitTuple n)     eo::List::nil)
    (($tuple_get_selectors_rec (Tuple T1 T2) n) (eo::cons eo::List::cons (tuple.select n) ($tuple_get_selectors_rec T2 (eo::add n 1))))
  )
)

; program: $dt_get_selectors
; args:
; - D Type: The type to get the selectors for.
; - c T: The constructor of D.
; return: The list of selectors of c, as a eo::List.
; note: >
;   (Unit) tuples are treated as a special case of datatypes whose selectors are
;   tuple.select indexed by an integer, which requires the above method.
(program $dt_get_selectors ((D Type) (T Type) (c Type) (T1 Type) (T2 Type :list))
  (Type T) eo::List
  (
    (($dt_get_selectors (Tuple T1 T2) tuple)  ($tuple_get_selectors_rec (Tuple T1 T2) 0))
    (($dt_get_selectors UnitTuple tuple.unit) eo::List::nil)
    (($dt_get_selectors D c)                  (eo::dt_selectors c)) ; user-defined datatypes
  )
)

; program: $dt_is_cons_app
; args:
; - t T: The term in question.
; return: true iff t is an application of a constructor.
(program $dt_is_cons_app ((T Type) (U Type) (t T) (f (-> U T)) (a U))
  (T) Bool
  (
    (($dt_is_cons_app (f a))        ($dt_is_cons_app f))
    (($dt_is_cons_app tuple)        true)
    (($dt_is_cons_app tuple.unit)   true)
    (($dt_is_cons_app t)            (eo::is_z (eo::list_len eo::List::cons (eo::dt_selectors t))))
  )
)
