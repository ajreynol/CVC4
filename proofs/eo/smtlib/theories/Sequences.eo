(include "../theories/Builtin.eo")
(include "../theories/Arith.eo")

; The sequence type.
; disclaimer: This sort is not in SMT-LIB.
(declare-type Seq (Type))

; Empty sequence
(declare-parameterized-const seq.empty ((T Type :implicit)) T)

; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.unit ((T Type :implicit)) (-> T (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.nth ((T Type :implicit)) (-> (Seq T) Int T))


; Core functions of strings.
(declare-parameterized-const seq.len ((T Type :implicit)) (-> (Seq T) Int))

(declare-parameterized-const seq.++
  ((T Type :implicit)) (-> (Seq T) (Seq T) (Seq T))
  :right-assoc-nil (seq.empty (Seq T)))

; Extended functions for strings.
(declare-parameterized-const seq.extract ((T Type :implicit))
  (-> (Seq T) Int Int (Seq T)))
(declare-parameterized-const seq.contains ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const seq.replace ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-parameterized-const seq.replace_all ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-parameterized-const seq.indexof ((T Type :implicit))
  (-> (Seq T) (Seq T) Int Int))
(declare-parameterized-const seq.at ((T Type :implicit))
  (-> (Seq T) Int (Seq T)))
(declare-parameterized-const seq.prefixof ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const seq.suffixof ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.rev ((T Type :implicit))
  (-> (Seq T) (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.update ((T Type :implicit))
  (-> (Seq T) Int (Seq T) (Seq T)))

