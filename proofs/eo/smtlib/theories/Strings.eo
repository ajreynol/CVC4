(include "../theories/Builtin.eo")
(include "../theories/Arith.eo")

; The string type
(declare-type String ())

; The regular expression type.
(declare-type RegLan ())

; String literals are strings.
(declare-consts <string> String)

; Core functions of strings.
(declare-const str.len (-> String Int))

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const str.++ (-> String String String) :right-assoc-nil "")

; Extended functions for strings.
(declare-const str.substr (-> String Int Int String))
(declare-const str.contains (-> String String Bool))
(declare-const str.replace (-> String String String String))
(declare-const str.indexof (-> String String Int Int))
(declare-const str.at (-> String Int String))
(declare-const str.prefixof (-> String String Bool))
(declare-const str.suffixof (-> String String Bool))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.rev (-> String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.unit (-> Int String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.update (-> String Int String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_lower (-> String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_upper (-> String String))
(declare-const str.to_code (-> String Int))
(declare-const str.from_code (-> Int String))
(declare-const str.is_digit (-> String Bool))
(declare-const str.to_int (-> String Int))
(declare-const str.from_int (-> Int String))
(declare-const str.< (-> String String Bool))
(declare-const str.<= (-> String String Bool))
(declare-const str.replace_all (-> String String String String))
(declare-const str.replace_re (-> String RegLan String String))
(declare-const str.replace_re_all (-> String RegLan String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.indexof_re (-> String RegLan Int Int))

; Regular expression operators.
(declare-const re.allchar RegLan)
(declare-const re.none RegLan)
(declare-const re.all RegLan)
(declare-const str.to_re (-> String RegLan))

; define: @re.empty
; return: The regular expression containing only the empty string.
(define @re.empty () (str.to_re ""))

(declare-const re.* (-> RegLan RegLan))
(declare-const re.+ (-> RegLan RegLan))
(declare-const re.opt (-> RegLan RegLan))
(declare-const re.comp (-> RegLan RegLan))
(declare-const re.range (-> String String RegLan))
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.++ (-> RegLan RegLan RegLan) :right-assoc-nil @re.empty)
(declare-const re.inter (-> RegLan RegLan RegLan) :right-assoc-nil re.all)
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.union (-> RegLan RegLan RegLan) :right-assoc-nil re.none)
(declare-const re.diff (-> RegLan RegLan RegLan))
(declare-const re.loop (-> Int Int RegLan RegLan))
(declare-const str.in_re (-> String RegLan Bool))

