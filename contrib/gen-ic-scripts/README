############## OVERVIEW OF THE WORKFLOW ##############

To use the workflow, at a high level, consists of the following strategy,
given in terms of scripts to run.

```
;; initialize [input_problem.smt2]
;; initialize the directory
runonce_reset_full
;; cache the I/O specification of the invertibility condition
runonce_gen_full_io_spec
(
  (
    ;; test the current candidate, given the current side condition
    run_test_candidate
    ( 
      ;; if the test succeeded
      run_test_candidate_full 
      ;; if verified, we are finished.
    | 
      ;; if the test failed
      ;; optionally, debug the current candidate
      ( run_eval_candidate )?
      ( run_visualize_candidate )?
    )
    ;; synthesize a new candidate
    ;; (modify [input_grammar.sy])?
    run_synth_candidate
    ;; kill the above process when a reasonable candidate is generated
  )*
  ;; try another part of the search
  ;; (modify [input_grammar.sy])?
  ;; (modify [input_problem.smt2])?
  run_reset
)*
```
The following describes the necessary files to set up for this workflow, and
the intermediate files that are generated, and how they can be modified.


############## INPUTS TO THE WORKFLOW ##############

[input_problem.smt2] 

The definition of the invertibility condition problem. This is, 
in *.smt2 format, the definition of a predicate `input` of the form
    (=> C (~ (op (f s t) s) t))
where C is a condition (or "case") of the invertibility condition that we
are currently focusing on. The function application (f s t) is interpreted
as the place for the function to synthesize, that is we interpret the above
as C => exists x. (~ (op x s) t). 
This file has several special markers used in steps of the procedure:
`__SIG` should mark the unique line that specifies the type of `input`,
`__SC` should mark the unique line that contains a definition of the side
condition.


[input_grammar.sy] 

The input grammar for solving the invertibility condition. This
is a *.sy definition of a synth-fun command for predicate `IC`.
The type of `IC` should match the type of `input` from [input_problem.smt2].


############## FILES GENERATED BY THE WORKFLOW ##############

[full_io_spec.smt2]

This is a cache of the I/O behavior of the input problem. This is a definition
of an array `io` whose constituent type is BitVector.


[pbe_examples.sy]

The constraints corresponding to a partial (PBE) specification. This
is a list of *.sy constraints of the form:
```
  (constraint (IC c1 c2))
```
corresponding to the approximate specification we are current testing.


[input_candidates.smt2]

This is the current list of candidate invertibility conditions generated by
the synthesis component of the workflow. This is, in *.smt2 format, a list of
definitions `IC` 


[candidate_log.smt2]

This is a list of candidate invertibility conditions that have been tested since
the last call to reset. In other words, these are the input conditions that
have been extracted by `run_test_candidate`, where `run_reset` clears this list.


[candidate_log_overall.smt2]

A concatenation of candidate_log.smt2 generated during the workflow. This is
update by `run_reset`.


[solution.smt2]

After a successful call to `run_test_candidate_full`, this is updated to the
solution of the invertibility condition problem.
