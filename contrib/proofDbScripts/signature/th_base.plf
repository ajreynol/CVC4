;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Theory of Equality and Congruence Closure
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; depends on : smt.plf

; sorts :

(declare arrow (! s1 sort (! s2 sort sort)))	; function constructor

; functions :

(declare apply (! s1 sort
               (! s2 sort
               (! t1 (term (arrow s1 s2))
               (! t2 (term s1)
                (term s2))))))


; inference rules :

(declare trust (th_holds false))	; temporary
(declare trust_f (! f (term Bool) (th_holds f)))  ; temporary

(declare refl
  (! s sort
  (! t (term s)
    (th_holds (= s t t)))))

(declare symm 
  (! s sort
  (! x (term s)
  (! y (term s)
  (! u (th_holds (= _ x y))
    (th_holds (= _ y x)))))))

(declare trans 
  (! s sort
  (! x (term s)
  (! y (term s)
  (! z (term s)
  (! u (th_holds (= _ x y))
  (! u (th_holds (= _ y z))
    (th_holds (= _ x z)))))))))

(declare cong 
  (! s1 sort
  (! s2 sort
  (! a1 (term (arrow s1 s2))
  (! b1 (term (arrow s1 s2))
  (! a2 (term s1)
  (! b2 (term s1)
  (! u1 (th_holds (= _ a1 b1))
  (! u2 (th_holds (= _ a2 b2))
    (th_holds (= _ (apply _ _ a1 a2) (apply _ _ b1 b2))))))))))))


;; TODO
(program evaluate_cmp ((x term) (y term)) bool
  tt)

; if two terms evaluate to the same thing, they are equal
(declare eval
  (! s sort
  (! x (term s)
  (! y (term s)
  (! e (^ (evaluate_cmp x y) tt)
    (th_holds (= s x y)))))))
    
;; FIXME
(declare RUN
  (! s sort
  (! x (term s)
  (! y (term s)
     type))))
