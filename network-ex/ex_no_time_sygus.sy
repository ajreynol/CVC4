(set-logic ALL)

;;; ----- Agents (Nodes, Packets, Channels)

(declare-datatype NodeMobile ((Rnode)))
(declare-datatype NodeInfra ((Anode) (Bnode) (Cnode)))
(declare-datatype NodeBase ((Dnode)))
(declare-datatype Node ((mobile (mnode NodeMobile)) (infra (inode NodeInfra)) (base (bnode NodeBase))))

(define-fun R () Node (mobile Rnode))
(define-fun A () Node (infra Anode))
(define-fun B () Node (infra Bnode))
(define-fun C () Node (infra Cnode))
(define-fun D () Node (base Dnode))

(declare-datatype Packet ((P1) (P2)))

(declare-datatype Channel ((Ch1) (Ch2) (Ch3)))

;;; ----- Action, Conditionals

(declare-datatype Action
(
(act_idle)
(act_send (_dst Node) (_pck Packet) (_chn Channel))
))

(declare-datatype CAtom
(
(ctrue)
(check_rcv (_rcv_pck Packet))
(check_rcv_ack (_rcv_ack_node Node) (_rcv_ack_pck Packet))
))

(declare-datatype CLit
(
(ca_pos (_ca_pos_arg CAtom))
(ca_neg (_ca_neg_arg CAtom))
))

;;; ----- State information

(declare-datatype State
(
(mk_state
  (_prcv (Set Packet))
  (_prcv_ack (Set (Tuple Node Packet)))
  (_energy Int)
)
))

(define-sort GlobalState () (Array (Tuple Node Int) State))


;;; ------ Axiomatization of conditions 

(define-fun catom_holds ((c CAtom) (n Node) (t Int) (g GlobalState)) Bool
  (ite ((_ is check_rcv) c)
    (member (_rcv_pck c) (_prcv (select g (mkTuple n t))))
  (ite ((_ is check_rcv_ack) c)
    (member (mkTuple (_rcv_ack_node c) (_rcv_ack_pck c)) (_prcv_ack (select g (mkTuple n t))))
  (ite ((_ is ctrue) c) 
    true
    false)
  ))
)

(define-fun clit_holds ((c CLit) (n Node) (t Int) (g GlobalState)) Bool
  (ite ((_ is ca_pos) c)
    (catom_holds (_ca_pos_arg c) n t g)
  (ite ((_ is ca_neg) c) 
    (not (catom_holds (_ca_neg_arg c) n t g))
    false)
  )
)

(define-fun precondition_for_action_holds ((a Action) (n Node) (t Int) (g GlobalState)) Bool
  (ite ((_ is act_send) a) 
    (and
      (not (catom_holds (check_rcv_ack (_dst a) (_pck a)) n t g))
      (catom_holds (check_rcv (_pck a)) n t g))
    true)
)

(define-fun conditional_act ((c CLit) (a Action) (ae Action) (n Node) (t Int) (g GlobalState)) Action
  (ite (and (clit_holds c n t g) (precondition_for_action_holds a n t g)) a ae)
)


;;; ----- Policies

(synth-fun policyR ((t Int) (g GlobalState)) Action (
   (Start Action (
        (conditional_act StartCLit Start Start R t g)
        act_idle
        (act_send StartNode StartPacket StartChannel)
   ))
   (StartCLit CLit (
      (ca_pos StartCAtom)
      (ca_neg StartCAtom)
   ))
   (StartCAtom CAtom (
      (check_rcv StartPacket)
      (check_rcv_ack StartNode StartPacket)
   ))
   (StartNode Node (R A B C D))
   (StartPacket Packet (P1 P2))
   (StartChannel Channel (Ch1 Ch2 Ch3))
))

(synth-fun policyA ((t Int) (g GlobalState)) Action (
   (Start Action (
        ;(conditional_act StartCondition A Start Start t g)
        act_idle
        (act_send StartNode StartPacket StartChannel)
   ))
   (StartCondition CAtom (
      (check_rcv StartPacket)
      (check_rcv_ack StartNode StartPacket)
   ))
   (StartNode Node (R A B C D))
   (StartPacket Packet (P1 P2))
   (StartChannel Channel (Ch1 Ch2 Ch3))
))

(synth-fun policyB ((t Int) (g GlobalState)) Action (
   (Start Action (
        ;(conditional_act StartCondition B Start Start t g)
        act_idle
        (act_send StartNode StartPacket StartChannel)
   ))
   (StartCondition CAtom (
      (check_rcv StartPacket)
      (check_rcv_ack StartNode StartPacket)
   ))
   (StartNode Node (R A B C D))
   (StartPacket Packet (P1 P2))
   (StartChannel Channel (Ch1 Ch2 Ch3))
))

(synth-fun policyC ((t Int) (g GlobalState)) Action (
   (Start Action (
        ;(conditional_act StartCondition C Start Start t g)
        act_idle
        (act_send StartNode StartPacket StartChannel)
   ))
   (StartCondition CAtom (
      (check_rcv StartPacket)
      (check_rcv_ack StartNode StartPacket)
   ))
   (StartNode Node (R A B C D))
   (StartPacket Packet (P1 P2))
   (StartChannel Channel (Ch1 Ch2 Ch3))
))

(synth-fun policyD ((t Int) (g GlobalState)) Action (
   (Start Action (
        ;(conditional_act StartCondition D Start Start t g)
        act_idle
        (act_send StartNode StartPacket StartChannel)
   ))
   (StartCondition CAtom (
      (check_rcv StartPacket)
      (check_rcv_ack StartNode StartPacket)
   ))
   (StartNode Node (R A B C D))
   (StartPacket Packet (P1 P2))
   (StartChannel Channel (Ch1 Ch2 Ch3))
))

(declare-var g GlobalState)

;;; temporary
(define-fun _MAX_PERIOD () Int 3)
;;; end temporary


(constraint
(=>
  ;; the global state we care about
  false

  ;; requirements
  (and 
    (member P1 (_prcv (select g (mkTuple D _MAX_PERIOD))))
    (member P2 (_prcv (select g (mkTuple D _MAX_PERIOD))))
  )
))

(check-synth)
