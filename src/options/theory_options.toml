id     = "THEORY"
name   = "Theory layer"
header = "options/theory_options.h"

[[option]]
  name       = "theoryOfMode"
  smt_name   = "theoryof-mode"
  category   = "expert"
  long       = "theoryof-mode=MODE"
  type       = "CVC4::theory::TheoryOfMode"
  default    = "CVC4::theory::THEORY_OF_TYPE_BASED"
  handler    = "stringToTheoryOfMode"
  includes   = ["options/theoryof_mode.h"]
  help       = "mode for Theory::theoryof()"

[[option]]
  name       = "useTheoryList"
  smt_name   = "use-theory"
  category   = "regular"
  long       = "use-theory=NAME"
  type       = "std::string"
  handler    = "handleUseTheoryList"
  notifies   = ["notifyUseTheoryList"]
  read_only  = true
  help       = "use alternate theory implementation NAME (--use-theory=help for a list). This option may be repeated or a comma separated list."

[[option]]
  name       = "modelBasedTc"
  category   = "regular"
  long       = "model-based-tc"
  type       = "bool"
  default    = "false"
  help       = "use model-based theory combination"

[[option]]
  name       = "modelBasedTcRlv"
  category   = "regular"
  long       = "model-based-tc-rlv"
  type       = "bool"
  default    = "true"
  help       = "use relevant equivalence classes for model-based theory combination"

[[option]]
  name       = "modelBasedTcAck"
  category   = "regular"
  long       = "model-based-tc"
  type       = "bool"
  default    = "false"
  help       = "use Ackermanization lemmas instead of care splits"

[[option]]
  name       = "modelBasedTcRewUnique"
  category   = "regular"
  long       = "model-based-tc-runique"
  type       = "bool"
  default    = "false"
  help       = "consider splits that are unique up to rewriting"

[[option]]
  name       = "modelBasedTcTermUnique"
  category   = "regular"
  long       = "model-based-tc-tunique"
  type       = "bool"
  default    = "false"
  help       = "consider splits on unique terms"
