; COMMAND-LINE: cvc4 --lang=sygus2

(set-logic UFBV)
(set-option :sygus-out status-and-def)
(set-option :e-matching false)

(define-sort Stream () (_ BitVec 117))
(define-fun ONE () Stream (_ bv1 117))

(define-sort Bound () (_ BitVec 7)) ;; Required: log2 (size(Stream)) + 1
(define-fun B_ZERO () Bound (_ bv0 7))
(define-fun B_ONE () Bound (_ bv1 7))

(define-fun S_FALSE () Stream (_ bv0 117))
(define-fun S_TRUE () Stream (bvnot S_FALSE))

(define-fun
  bvimpl ( (X Stream) (Z Stream) ) Stream
  (bvor (bvnot X) Z)
)

(define-fun-rec
  O_rec ( (n Bound) (B Stream) (X Stream) ) Stream
  (ite (= n B_ZERO)
    B
    (bvor (O_rec (bvsub n B_ONE) B X) (bvshl X (concat (_ bv0 110) n)))
  )
)

(define-fun
  O ( (_act Stream) (l Bound) (u Bound) (X Stream) ) Stream
  (let (( laX (bvshl (bvand _act X) (concat (_ bv0 110) l)) ))
    (ite (bvugt l u)
      S_FALSE
      (O_rec (bvsub u l) laX laX)
    )
  )
)

(define-fun
  H ( (_act Stream) (l Bound) (u Bound) (X Stream) ) Stream
  (bvnot (O _act l u (bvnot X)))
)

(define-fun
  S_inf ( (X Stream) (Z Stream) ) Stream
  (bvor Z
    (bvand X 
      (bvnot (bvadd  (bvor X Z) Z ))
    )
  )
)

(define-fun
  S ( (_act Stream) (l Bound) (u Bound) (X Stream) (Z Stream) ) Stream
  (let ((oX (bvor (bvnot _act) X)))
    (bvand
      (O _act l u Z)
      (S_inf (bvshl oX (concat (_ bv0 110) l)) (bvshl (bvand _act Z) (concat (_ bv0 110) l)))
      (ite (= l B_ZERO) S_TRUE (H _act B_ZERO (bvsub l B_ONE) oX))
    )
  )
)

(define-fun
  O_st ( (_act Stream) (l Bound) (u Bound) (X Stream) ) Stream
  (let ((aX (bvand _act X)))
    (ite (bvugt l u)
      S_FALSE
      (ite (= l B_ZERO)
        (O_rec u S_FALSE aX)
        (O_rec (bvsub u l) (bvshl aX (concat (_ bv0 110) l)) (bvshl aX (concat (_ bv0 110) l)))
      )
    )
  )
)

(define-fun
  H_st ( (_act Stream) (l Bound) (u Bound) (X Stream) ) Stream
  (bvnot (O_st _act l u (bvnot X)))
)

(define-fun
  Y ( (_act Stream) (l Bound) (u Bound) (X Stream) ) Stream
  ; Inline definition for (S_st _act l u S_FALSE X)
  (let ((_fct (bvnot _act)))
    (bvand
      (O_st _act l u X)
      (ite (= l B_ZERO)
        (S_inf (bvshl _fct ONE) (bvshl (bvand _act X) ONE))
        (bvand
          (S_inf (bvshl _fct (concat (_ bv0 110) l)) (bvshl (bvand _act X) (concat (_ bv0 110) l)))
          (H_st _act B_ZERO l _fct)
        )
      )
    )
  )
)

(synth-fun phi ((_act Stream) (HallwayLight_on Stream) (HallwayMotionSensor_active Stream)) Stream
   ((<T> Stream) (<F> Stream) (<B> Bound) (<P> Stream))
   ((<T> Stream (
     (bvimpl <P> <F>)
    ))
    (<F> Stream (
     S_TRUE 
     S_FALSE
     <P>
     (bvnot <F>)
     (bvand <F> <F>) 
     (bvor <F> <F>)
     (bvimpl <F> <F>)
     (Y _act <B> <B> <F>)
     (O _act <B> <B> <F>)
     (H _act <B> <B> <F>)
     (S _act <B> <B> <F> <F>)
    ))
    (<B> Bound (
     (Constant Bound)
    ))
    (<P> Stream (HallwayLight_on HallwayMotionSensor_active))
   )
)

; Positive Examples
(constraint
   (and
(let ((act #b000000000000000001000000000000000000000000001000010000000001110000000000000000000100010100000000000001000000000000000))
      (= (bvand act (phi act #b000000000000000001000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000 #b000000000000000001000000000000000000000000001000000000000001110000000000000000000000010100000000000001000000000000000)) act))
(let ((act #b001000000001000001000000000001001000000000010000000000000001000000100000001000000000000000000000000000000000000000100))
      (= (bvand act (phi act #b001000000001000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000100 #b000000000001000000000000000000000000000000010000000000000001000000100000001000000000000000000000000000000000000000100)) act))
(let ((act #b001000000010000001000000000000000000000000000000000000000000001000000000100010010000000000000001000000000101000000000))
      (= (bvand act (phi act #b000000000000000000000000000000000000000000000000000000000000000000000000000010010000000000000000000000000100000000000 #b001000000010000001000000000000000000000000000000000000000000000000000000000010000000000000000001000000000100000000000)) act))
(let ((act #b000000000000000010000000000000000000000000000000000001000011000000000000001000000000001000000001000000100000100100000))
      (= (bvand act (phi act #b000000000000000010000000000000000000000000000000000000000001000000000000000000000000000000000001000000000000000000000 #b000000000000000010000000000000000000000000000000000001000001000000000000001000000000000000000001000000100000000000000)) act))
(let ((act #b100000000000000000000111000000000000010000000001010000100000000010000000100000000000000000000000000000000000000000000))
      (= (bvand act (phi act #b000000000000000000000001000000000000010000000000000000000000000010000000100000000000000000000000000000000000000000000 #b100000000000000000000000000000000000010000000000010000100000000000000000100000000000000000000000000000000000000000000)) act)) 
   )
)

; Negative Examples
(constraint
   (and
(let ((act #b000000000000001010000000000000000100000000000010001000010000000000000000000000000001000000000010000000000000000100001))
      (not (= (bvand act (phi act #b000000000000000000000000000000000000000000000000001000010000000000000000000000000000000000000010000000000000000100000 #b000000000000001000000000000000000000000000000010000000000000000000000000000000000001000000000010000000000000000000000)) act)))
(let ((act #b000000000000000000000000000001010000000000000100000000100000001010000000000000000011000000000100000000010000000000000))
      (not (= (bvand act (phi act #b000000000000000000000000000000010000000000000100000000100000001000000000000000000011000000000000000000010000000000000 #b000000000000000000000000000000000000000000000000000000000000000010000000000000000011000000000000000000000000000000000)) act)))
(let ((act #b100000100000001000000000000000000000000000000000000000000000000100000100000000000001010000000000010100000000000000000))
      (not (= (bvand act (phi act #b100000000000001000000000000000000000000000000000000000000000000000000100000000000001000000000000000100000000000000000 #b000000000000001000000000000000000000000000000000000000000000000000000100000000000001000000000000010000000000000000000)) act)))
(let ((act #b001000000000000000000100000000000100101000000000000001000100000000000000000000000000001000000000000000000001100000000))
      (not (= (bvand act (phi act #b001000000000000000000100000000000100001000000000000000000000000000000000000000000000000000000000000000000000000000000 #b001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)) act)))
(let ((act #b000000000000000000000000000000000000000000000010000000000100000000001000000001000000001000000100000000000100100000001))
      (not (= (bvand act (phi act #b000000000000000000000000000000000000000000000010000000000100000000001000000000000000001000000000000000000000000000000 #b000000000000000000000000000000000000000000000010000000000000000000000000000000000000001000000100000000000100100000000)) act))) 
   )
)

(check-synth)
